VER EN YOUTUBE:
---------------
https://www.youtube.com/watch?v=HiXLkL42tMU


Working DIrectory:  Es donde se trabaja con los archivos
Staging Area:       Un área local propia antes de llevar los cambios al repositorio formal.
Repository:         Reposistorio real compartido con otros usuarios

Para inicializar un proyecto en Git, dentro de la carpeta raíz:
    $ git init
Para ver el estado de los archivos dentro del proyecto que faltan chequear:
    $ git status
Para adicionar un  archivo al proyecto git:
    $ git add namefile.js
Para adicionar todos los archivos pendientes  al proyecto git:
    $ git add .
Para subir un cambio al working folder
    $ git commit  Digite “i”  Digite el texto comentario  ESC  :wq
Para subir un cambio sin editor de comentarios
    $ git commit -m "Commit de Componentes en un n uevo Branch"
Para deschequear un archivo chequeado
    $ git reset HEAD filename.js
Para ver el histórico de cambios
    $ git log
Para comparar diferencias local vs la ultima
    $ git  diff filenmae.js
Para volver a tomar la ultima versión  de un archivo que cambie (no debe estar chequeado)
    $ git checkout filename.js 
A partir del estado actual del proyecto crear una rama nueva  (por defecto inicia en la master)
    $ git branch MyBranchName
Para visualizar que Branchs tiene el proyecto:
    $ git branch
Para acceder a un Branch espcifico
    $ git checkout MyBranchName

CONECTARSE AL REPOSITORIO REMOTO
---------------------------------
Conectarse al repositorio
    $ git remote add origin URL_Repositorio_GIT
Actualizar todos los cambios desde el Staging Area al Repository:
    $ git push -u origin --all
Como enviar cambios al repositorio (desde el branch master, previamente habiendo definido el origin)
    $ git push -u origin master
Como desconectarse del repositorio
    $ git remote rm origin

DEVOLVERSE Y DESTRUIR CAMBIOS
-----------------------------
Devolverse a la versiòn de un commit especifico: (Primero dbe hacer git log para obtener el còdigo Sha)
    $ git checkout c57f0d4dbde9ccab51f07538f8db3ba10ab4d759
Devolverse a la ùltima versiòn de un Branch:
    $ git checkout BranchName
Destruir un cambio solo en el Staging Area y el Repositorio:
    $ git reset --soft c57f0d4dbde9ccab51f07538f8db3ba10ab4d759
Destruir un cambio tanto en el Working, el Staging Area y el Repositorio:
    $ git reset --hard c57f0d4dbde9ccab51f07538f8db3ba10ab4d759

MANEJO DE TAGS PARA VERSIONAMIENTO
----------------------------------
Asignarle un TAG (anotada) al ùltimo Commmit realizado:
    $ git tag -a v1.0 -m "Versiòn 1.0 frl Proyecto TestGIT"
Asignarle un TAG (ligero) al ùltimo Commmit realizado:
    $ git tag -a v1.0
Asignarle un TAG a un Commmit especifico:  (Primero dbe hacer git log para obtener el còdigo Sha)
    $ git tag -a v1.0 -m "Versiòn 1.0 frl Proyecto TestGIT" c57f0d4dbde9ccab51f07538f8db3ba10ab4d759
Para subir la definciòn del Tag al repositorio:
    $ git push origin v1.0
Para subir todas las definiciones de Tags al repositorio:
    $ git push origin --tags

DESCARGANDO CAMBIOS DESDE EL REPOSITORIO
----------------------------------------
Listar las ramas ocultas locales de Git:
    $ git branch -a 
Descargar los fuentes desde el Repositorio a la rama oculta local de Git:
    $ git fecth origin
Hacer la fusión desde la rama oculta al Branch que se requiere:
    $git merge origin/BranchName